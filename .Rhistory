install.packages("usethis")
library(usethis)
install.packages("gitcreds")
library(gitcreds)
create_github_token()
gidcreds_set()
gitcreds_set()
theUrl = "http://pbrown.ca/teaching/appliedstats/data/motorcycle.rds"
theFile = basename(theUrl)
if (!file.exists(theFile)) download.file(theUrl, theFile)
x = readRDS(theFile)
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
import(mgcv)
import('mgcv')
install.packages('mgcv')
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
library(mgcv)
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
install.packages('Hmisc')
install.packages("Hmisc")
library(Hmisc)
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
install.packages("htmltools")
install.packages("htmltools")
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
remove.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("remotes")
remotes::install_version("htmltools", version = "0.5.7")
packageVersion("htmltools")
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
x$month = factor(format(x$date, "%b"), levels = format(ISOdate(2000,
+ 1:12, 1), "%b"))
res = glm(killed ~ offset(logMonthDays) + dateInt + month, data = x,
+ family = poisson(link = "log"))
res = glm(killed ~ offset(logMonthDays) + dateInt + month, data = x,
+ family=poisson(link = "log"))
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
x$month = factor(format(x$date, "%b"), levels = format(ISOdate(2000,
+ 1:12, 1), "%b"))
res = glm(killed ~ offset(logMonthDays) + dateInt + month, data = x,
+ family=poisson(link = "log"))
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
x$month = factor(format(x$date, "%b"), levels = format(ISOdate(2000,
+ 1:12, 1), "%b"))
res = glm(killed ~ offset(logMonthDays) + dateInt + month, data = x,
+ family = poisson(link = "log"))
res <- glm(killed ~ offset(logMonthDays) + dateInt + month, data = x,
family = poisson(link = "log"))
newdata <- data.frame(date = seq(as.Date("1975/1/1"), as.Date("2030/1/1"), by = "month"))
newdata$dateInt <- as.integer(newdata$date)
newdata$logMonthDays <- log(30)  # Approximation
newdata$month <- factor("Mar", levels = levels(x$month))
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
x$month = factor(format(x$date, "%b"), levels = format(ISOdate(2000,
+ 1:12, 1), "%b"))
res <- glm(killed ~ offset(logMonthDays) + dateInt + month, data = x,
family = poisson(link = "log"))
newdata <- data.frame(date = seq(as.Date("1975/1/1"), as.Date("2030/1/1"), by = "month"))
newdata$dateInt <- as.integer(newdata$date)
newdata$logMonthDays <- log(30)  # Approximation
newdata$month <- factor("Mar", levels = levels(x$month))
pred1 <- predict(res, newdata, type = "link")
newdata$month <- factor(format(newdata$date, "%b"), levels = levels(x$month))
pred2 <- predict(res, newdata, type = "link")
plot(x$date, x$killed, cex = 0.2, log = "y", xlab = "", ylab = "")
matlines(newdata$date, exp(cbind(pred1, pred2)), lty = 1, col = 1:2)
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
x$month = factor(format(x$date, "%b"), levels = format(ISOdate(2000,
+ 1:12, 1), "%b"))
res = glm(killed ~ offset(logMonthDays) + dateInt + month, data = x,
family = poisson(link = "log"))
newdata = data.frame(date = seq(as.Date("1975/1/1"), as.Date("2030/1/1"), by = "month"))
newdata$dateInt = as.integer(newdata$date)
newdata$logMonthDays = log(30)  # Approximation
newdata$month = factor("Mar", levels = levels(x$month))
pred1 = predict(res, newdata, type = "link")
newdata$month = factor(format(newdata$date, "%b"), levels = levels(x$month))
pred2 = predict(res, newdata, type = "link")
plot(x$date, x$killed, cex = 0.2, log = "y", xlab = "", ylab = "")
matlines(newdata$date, exp(cbind(pred1, pred2)), lty = 1, col = 1:2)
View(x)
View(newdata)
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
x$month = factor(format(x$date, "%b"), levels = format(ISOdate(2000,
+ 1:12, 1), "%b"))
x$dateInt = as.integer(x$date)
View(x)
fittedmodel = gam(killed ~ months offset(logMonthDays + s(daysint), data = x))
fittedmodel = gam(killed ~ months + offset(logMonthDays + s(daysint), data = x))
theUrl = "http://pbrown.ca/teaching/appliedstats/data/motorcycle.rds"
theFile = basename(theUrl)
if (!file.exists(theFile)) download.file(theUrl, theFile)
x = readRDS(theFile)
View(x)
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
x$month = factor(format(x$date, "%b"), levels = format(ISOdate(2000,
+ 1:12, 1), "%b"))
x$dateInt = as.integer(x$date)
res = glm(killed ~ offset(logMonthDays) + dateInt + month, data = x,
family = poisson(link = "log"))
newdata = data.frame(date = seq(as.Date("1975/1/1"), as.Date("2030/1/1"), by = "month"))
newdata$dateInt = as.integer(newdata$date)
newdata$logMonthDays = log(30)  # Approximation
newdata$killsbymonth =
newdata$month = factor("Mar", levels = levels(x$month))
pred1 = predict(res, newdata, type = "link")
newdata$month = factor(format(newdata$date, "%b"), levels = levels(x$month))
pred2 = predict(res, newdata, type = "link")
plot(x$date, x$killed, cex = 0.2, log = "y", xlab = "", ylab = "")
matlines(newdata$date, exp(cbind(pred1, pred2)), lty = 1, col = 1:2)
View(newdata)
View(x)
fittedmodel = gam(killed ~ months + offset(logMonthDays + s(daysint), data = x))
library('mgcv')
fittedmodel = gam(killed ~ months + offset(logMonthDays + s(daysint), data = x))
fittedmodel = gam(killed ~ months + offset(logMonthDays + s(daysint), data = x))
names(x)
fittedmodel = gam(killed ~ months + offset(logMonthDays + s(daysint), data = x))
names(x)
model <- lm(killed ~ months, data = x)
model <- lm(killed ~ months, data = newdata)
fittedmodel = gam(dateint ~ months + offset(logMonthDays + s(daysint), data = newdata))
fittedmodel = gam(dateint~ months + offset(logMonthDays + s(daysint), data = newdata))
fittedmodel = gam(dateint~ months + offset(logMonthDays + s(daysint), method='ML', data = newdata))
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
x$month = factor(format(x$date, "%b"), levels = format(ISOdate(2000,
+ 1:12, 1), "%b"))
x$dateInt = as.integer(x$date)
res = glm(killed ~ offset(logMonthDays) + dateInt + month, data = x,
family = poisson(link = "log"))
newdata$killsbymonth = aggregate(killed ~ month, data = x, sum)
x$dateInt = as.integer(x$date)
x$logMonthDays = log(Hmisc::monthDays(x$date))
x$month = factor(format(x$date, "%b"), levels = format(ISOdate(2000,
+ 1:12, 1), "%b"))
x$dateInt = as.integer(x$date)
res = glm(killed ~ offset(logMonthDays) + dateInt + month, data = x,
family = poisson(link = "log"))
newdata = data.frame(date = seq(as.Date("1975/1/1"), as.Date("2030/1/1"), by = "month"))
newdata$dateInt = as.integer(newdata$date)
newdata$logMonthDays = log(30)  # Approximation
newdata$month = factor("Mar", levels = levels(x$month))
pred1 = predict(res, newdata, type = "link")
newdata$month = factor(format(newdata$date, "%b"), levels = levels(x$month))
pred2 = predict(res, newdata, type = "link")
plot(x$date, x$killed, cex = 0.2, log = "y", xlab = "", ylab = "")
matlines(newdata$date, exp(cbind(pred1, pred2)), lty = 1, col = 1:2)
View(newdata)
View(x)
fittedmodel = gam(
killed ~ months + s(daysint) + offset(logMonthDays),
family = nb(),
method = 'ML',
data = x
)
fittedmodel = gam(
killed ~ months + s(dateint) + offset(logMonthDays),
family = nb(),
method = 'ML',
data = x
)
fittedmodel = gam(
killed ~ months + s(dateInt) + offset(logMonthDays),
family = nb(),
method = 'ML',
data = x
)
fittedmodel = gam(
killed ~ month + s(dateInt) + offset(logMonthDays),
family = nb(),
method = 'ML',
data = x
)
summary(fittedmodel)
fittedmodel = gam(
killed ~ month + s(dateInt) + offset(logMonthDays),
family = nb,
method = 'ML',
data = x
)
summary(fittedmodel)
plot(x$date, x$killed,
col = 'red', log = 'y',
xlab = 'date', ylab = 'Killed')
matlines(x$date,
exp(do.call(cbind, predict(res,
se.fit = TRUE)) %*% Pmisc::ciMat()),
lty = c(1, 2, 2), col = 'black')
install.packages("Pmisc")
library(Pmisc)
install.packages("Pmisc")
library(Pmisc)
library(Pmisc)
plot(x$date, x$killed,
col = 'red', log = 'y',
xlab = 'date', ylab = 'Killed')
matlines(x$date,
exp(do.call(cbind, predict(res,
se.fit = TRUE)) %*% Pmisc::ciMat()),
lty = c(1, 2, 2), col = 'black')
matplot(x$date,
x$dateInt / 10000 + cbind(
0.7 * cos(2 * pi * co2s$dateInt / 365.25),
cos(2 * pi * co2s$dateInt / 365.25 + 1.5)
),
type = 'l', lty = 1,
xlab = '', ylab = '', xlim)
matplot(x$date,
x$dateInt / 10000 + cbind(
0.7 * cos(2 * pi * x$dateInt / 365.25),
cos(2 * pi * x$dateInt / 365.25 + 1.5)
),
type = 'l', lty = 1,
xlab = '', ylab = '', xlim)
matplot(x$date,
x$dateInt / 10000 + cbind(
0.7 * cos(2 * pi * x$dateInt / 365.25),
cos(2 * pi * x$dateInt / 365.25 + 1.5)
),
type = 'l', lty = 1,
xlab = '', ylab = '')
matplot(x$date,
x$dateInt / 10000 + cbind(
0.7 * cos(2 * pi * x$dateInt / 365.25),
cos(2 * pi * x$dateInt / 365.25 + 1.5)
),
type = 'l', lty = 1,
xlab = '', ylab = '')
lines(x$date, x$kills, col = 'blue', lwd = 2)
# Plot the seasonal components first
matplot(x$date,
x$dateInt / 10000 + cbind(
0.7 * cos(2 * pi * x$dateInt / 365.25),
cos(2 * pi * x$dateInt / 365.25 + 1.5)
),
type = 'l', lty = 1,
xlab = '', ylab = '')
# Add the number of kills to the same plot
lines(x$date, x$kills, col = 'blue', lwd = 2)  # Add kills as a blue line with increased line width
lines(x$date, x$kills, col = 'blue', lwd = 2)
matplot(x$date,
x$dateInt / 10000 + cbind(
0.7 * cos(2 * pi * x$dateInt / 365.25),
cos(2 * pi * x$dateInt / 365.25 + 1.5)
),
type = 'l', lty = 1,
xlab = '', ylab = '')
# Add the number of kills to the same plot
lines(x$date, x$kills, col = 'blue', lwd = 2)
matplot(x$date,
x$dateInt / 10000 + cbind(
0.7 * cos(2 * pi * x$dateInt / 365.25),
cos(2 * pi * x$dateInt / 365.25 + 1.5)
),
type = 'l', lty = 1,
xlab = '', ylab = '')
matplot(x$date,
x$kills,
type = 'l',
col = 'blue',
lty = 1,
xlab = 'Date',
ylab = 'Kills')
matplot(x$date,
x$killed,
type = 'l',
col = 'blue',
lty = 1,
xlab = 'Date',
ylab = 'Kills')
matplot(x$date,
x$kills,
type = 'p',  # 'p' for points
col = 'blue',
pch = 16,    # Use filled circles for points
xlab = 'Date',
ylab = 'Kills')
matplot(x$date,
x$killed,
type = 'p',  # 'p' for points
col = 'blue',
pch = 16,    # Use filled circles for points
xlab = 'Date',
ylab = 'Kills')
matplot(x$date,
x$dateInt / 10000 + cbind(
0.7 * cos(2 * pi * x$dateInt / 365.25),
cos(2 * pi * x$dateInt / 365.25 + 1.5)
),
type = 'l',
lty = 1,
xlab = 'Date',
ylab = 'Value')  # Add appropriate labels
# Now plot kills as points on the same graph
points(x$date, x$kills, col = 'blue', pch = 16)
plot(x$date,
x$kills,
type = 'p',        # Plot kills as points
col = 'blue',
pch = 16,          # Use filled circles for points
xlab = 'Date',
ylab = 'Kills',
ylim = range(x$kills))  # Set y-axis limits based on kills
matplot(x$date,
x$dateInt / 10000 + cbind(
0.7 * cos(2 * pi * x$dateInt / 365.25),
cos(2 * pi * x$dateInt / 365.25 + 1.5)
),
type = 'l', lty = 1,
xlab = '', ylab = '')
matplot(x$date,
x$killed,
type = 'p',  # 'p' for points
col = 'blue',
pch = 16,    # Use filled circles for points
xlab = 'Date',
ylab = 'Kills')
matplot(x$date,
x$dateInt / 10000 + cbind(
0.7 * cos(2 * pi * x$dateInt / 365.25),
cos(2 * pi * x$dateInt / 365.25 + 1.5)
),
type = 'l', lty = 1,
xlab = '', ylab = '')
matplot(x$date,
x$killed,
type = 'p',  # 'p' for points
col = 'blue',
pch = 16,    # Use filled circles for points
xlab = 'Date',
ylab = 'Kills')
heatUrl = "http://pbrown.ca/teaching/appliedstats/data/sableIsland.rds"
dir.create("cache", showWarnings = FALSE)
heatFile = file.path("cache", basename(heatUrl))
if (!file.exists(heatFile))
download.file(heatUrl, heatFile)
x = readRDS(heatFile)
names(x) = gsub("[.]+C[.]", "", names(x))
x$Date = as.Date(x$Date)
x$month = as.numeric(format(x$Date, "%m"))
x$summer = x$month %in% 5:10
View(x)
x[100, ]
# Output:
# Date        Max.Temp  month  summer
# 2565  1898-01-08  4.4    1     FALSE
x$dateInt = as.integer(x$Date)
x$yearFac = factor(format(x$Date, "%Y"))
xSub = x[x$summer & !is.na(x$Max.Temp), ]
library("mgcv")
res1 = gam(update.formula(
Max.Temp ~ s(dateInt, pc = as.integer(as.Date("1990/7/1")), k = 100) +
s(yearFac, bs = "re") +
Pmisc::seasonalFormula(period = 365.25, harmonics = 1:2, var = "dateInt")),
data = xSub, method = "ML", optimizer = "efs")
x$dateInt = as.integer(x$Date)
x$yearFac = factor(format(x$Date, "%Y"))
xSub = x[x$summer & !is.na(x$Max.Temp), ]
library("mgcv")
# Directly define the formulas and pass them to the gam() function
formula1 <- Max.Temp ~ s(dateInt, pc = as.integer(as.Date("1990/7/1")), k = 100) +
s(yearFac, bs = "re") +
Pmisc::seasonalFormula(period = 365.25, harmonics = 1:2, var = "dateInt")
formula2 <- Max.Temp ~ s(dateInt, pc = as.integer(as.Date("1990/7/1")), k = 4) +
s(yearFac, bs = "re") +
Pmisc::seasonalFormula(period = 365.25, harmonics = 1:2, var = "dateInt")
formula3 <- Max.Temp ~ s(dateInt, pc = as.integer(as.Date("1990/7/1")), k = 100) +
Pmisc::seasonalFormula(period = 365.25, harmonics = 1:2, var = "dateInt")
# Fit the models using the defined formulas
res1 = gam(formula1, data = xSub, method = "ML", optimizer = "efs")
x$dateInt = as.integer(x$Date)
x$yearFac = factor(format(x$Date, "%Y"))
xSub = x[x$summer & !is.na(x$Max.Temp), ]
library("mgcv")
# Directly define the formulas and pass them to the gam() function
formula1 <- Max.Temp ~ s(dateInt, pc = as.integer(as.Date("1990/7/1")), k = 100) +
s(yearFac, bs = "re") +
Pmisc::seasonalFormula(period = 365.25, harmonics = 1:2, var = "dateInt")
formula2 <- Max.Temp ~ s(dateInt, pc = as.integer(as.Date("1990/7/1")), k = 4) +
s(yearFac, bs = "re") +
Pmisc::seasonalFormula(period = 365.25, harmonics = 1:2, var = "dateInt")
formula3 <- Max.Temp ~ s(dateInt, pc = as.integer(as.Date("1990/7/1")), k = 100) +
Pmisc::seasonalFormula(period = 365.25, harmonics = 1:2, var = "dateInt")
# Fit the models using the defined formulas
res1 = gam(formula1, data = xSub, method = "ML", optimizer = "efs")
x$dateInt = as.integer(x$Date)
x$yearFac = factor(format(x$Date, "%Y"))
xSub = x[x$summer & !is.na(x$Max.Temp), ]
library("mgcv")
# Directly define the formulas and pass them to the gam() function
formula1 <- Max.Temp ~ s(dateInt, pc = as.integer(as.Date("1990/7/1")), k = 100) +
s(yearFac, bs = "re") +
Pmisc::seasonalFormula(period = 365.25, harmonics = 1:2, var = "dateInt")
formula2 <- Max.Temp ~ s(dateInt, pc = as.integer(as.Date("1990/7/1")), k = 4) +
s(yearFac, bs = "re") +
Pmisc::seasonalFormula(period = 365.25, harmonics = 1:2, var = "dateInt")
formula3 <- Max.Temp ~ s(dateInt, pc = as.integer(as.Date("1990/7/1")), k = 100) +
Pmisc::seasonalFormula(period = 365.25, harmonics = 1:2, var = "dateInt")
# Fit the models using the defined formulas
res1 = gam(formula1, data = xSub, method = "ML", optimizer = "efs")
install.packages("devtools")
devtools::install_github("pbrown4/Pmisc")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("pbrown4/Pmisc")
library(Pmisc)
